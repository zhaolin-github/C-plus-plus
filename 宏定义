宏定义
预处理时，将宏名替换为字符串不做语法检查
（宏名一般要大写，写在函数花括号外，并写在文件开始，可以用　#define定义宏终止的定义域，宏定义可以嵌套）

带参数的宏定义
格式：#define 标识符(参数表) 宏体

例如：

define N(x,y) x*y
若在程序中出现代码“area=N(3,3);” 则执行顺序为：先替换为“area=xy;”，再替换为“area=33;”

说明：

实参如果是表达式容易出问题，例如：#define S(r) r*r    
代码：area=S(a+b);

执行顺序：1.area=rr   2.area=a+ba+b   
所以正确的宏定义为：#define S(r) ((r)*(r))

宏名和参数的括号之间不能有空格

宏替换只做替换，不做计算，也不做表达式求解

宏展开不占运行时间，只占用编译时间

下面继续看两个例子：

#define MAX(a,b) ((a)>(b)?(a):(b)) ... i_max = MAX(1+2,value);
替换成：

((1+2)>(value)?(1+2):(value))
#define FUCT(a) "a" ... str = FUCT(234);
以上会被替换成“234”吗？答案是不会，无论是多少，都会被替换为“a”。想要实现“234”继续往下看。

有参数宏定义中#的用法

#define STR(str) #str
以上宏定义是将参数str两端加上字符串的“”，即str内容是什么就替换成相应的字符串。但是以下情况会出错：

STR())，编译器不会把中间的“)”当作参数；

STR(,)，编译器不会把“,”当作参数；

STR(a,b)，如果参数多了，编译器会把多余的参数舍去；

STR((a,b))，编译器会解读"(a,b)"为参数

有参数宏定义中##的用法

#define SUB(str) L##str
结果：

以上宏定义会在形参str前加上L。

比如代码：SUB("123")就会被替换为L"123"。再比如

#define FUN(a,b) vo##a##b() ... FUN(id ma,in);
以上会被替换为：void main()

要说明#和##区别，首先看如下代码：

#include <iostream> 
 #define t01(x) test##x 
 #define t02(y) #y 
 
using namespace std; 
 int main() { 
     int test1 = 10; 
 cout<<t01(1)<<endl; 
 cout<<t02(test1)<<endl; 
 return 0; 11 }
输出为：


10

test1

##是链接符号，可用于参数连接，如代码行2所示

#出现在宏定义中的#是将跟在其后的的参数转换成一个字符串，即字符串化，如代码行3所示。

